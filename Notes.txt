/*
function generatePowerballHistory() {
//
}

function generateMegaMillionsHistory() {
//
}

function displayPowerballHistory() {
//
}

function displayMegaMillionsHistory() {
//
}



// #3: generate each nav item (i.e. Powerball History and MegaMillions history)...
function generateNavItem(drawing) {
    return `
    <li>
    <button><data-drawing="${drawing.name.toLowerCase()}">${drawing.name} History</button>
    </li>
    `
}

// #2: generate nav section with nav items (i.e. the names of the lotteries, Powerball and MegaMillions). 
// drawings are passed in from displayNacSection...
function generateNavSection(drawings) {
    //
    return `
    <section id="navsection">
        <ul id="navlist">
            ${drawings.map(generateNavItem).join("\n")}
        </ul>
    </section>
    `
}

// #1: append the nav section...
// drawings carry over, main becomes container (in case we want to put this somewhere else other than main), generate the nav section, and append
function displayNavSection(drawings, container, append = true) {
    appendOrReplace(drawings, container, generateNavSection, append);
}
*/



/*

function generateHistoryLink(drawingName, drawingDate, drawingNumbers) {
    return `
    <a class="historyLink"><h3>${drawingName} History</h3></a>
     `
}
*/










// #3: generate each nav item (i.e. Powerball History and MegaMillions history)...
function generateNavItem(drawing) {
    return `
    <li>
    <button><h4 data-drawing="${drawing.name.toLowerCase()}">${drawing.name} History</h4></button>
    </li>
    `
}
// #2: generate nav section with nav items (i.e. the names of the lotteries, Powerball and MegaMillions). 
// drawings are passed in from displayNacSection...
function generateNavSection(drawings) {
    //
    return `
    <section id="navsection">
        <ul id="navlist">
            ${drawings.map(generateNavItem).join("\n")}
        </ul>
    </section>
    `
}





        <button id="navlink" data-drawing="${drawing.name.toLowerCase()}>${drawing.name} History</button>














/*
function generatePowerballHistory() {
//
}

function generateMegaMillionsHistory() {
//
}

function displayPowerballHistory() {
//
}

function displayMegaMillionsHistory() {
//
}



// #3: generate each nav item (i.e. Powerball History and MegaMillions history)...
function generateNavItem(drawing) {
    return `
    <li>
    <button><data-drawing="${drawing.name.toLowerCase()}">${drawing.name} History</button>
    </li>
    `
}

// #2: generate nav section with nav items (i.e. the names of the lotteries, Powerball and MegaMillions). 
// drawings are passed in from displayNacSection...
function generateNavSection(drawings) {
    //
    return `
    <section id="navsection">
        <ul id="navlist">
            ${drawings.map(generateNavItem).join("\n")}
        </ul>
    </section>
    `
}

// #1: append the nav section...
// drawings carry over, main becomes container (in case we want to put this somewhere else other than main), generate the nav section, and append
function displayNavSection(drawings, container, append = true) {
    appendOrReplace(drawings, container, generateNavSection, append);
}
*/





















/*
function getLotteryDataFromApi(powerBallSuccess, megaMillionsSuccess, powerBallError, megaMillionsError) {
    getPowerballDataFromApi(powerBallSuccess, powerBallError);
    getMegaMillionsDataFromApi(megaMillionsSuccess,megaMillionsError);
}
*/

/* call the first lottery (first api)
then we need to set the STORE's to what the api is (powerball, megamillions) this is in the callback.
then in the callback, we need to call the second api.
in the second api's callback, we set the STORE's other lottery, then we display on the screen

*/










function handlePowerballHistory() {
    $('main').on('click', '#goToPowerballHistory', function(event) {
        displayPowerballHistory();
    });
}

function handleMegaMillionsHistory() {
    $('main').on('click', '#goToMegaMillionsHistory', function(event) {
        displayMegaMillionsHistory();
    });
}











1. create files (use Open folder and then create files in that project) and name them index(best practice).
2. From your wireframe, create the basic structre of all the pages your app will need.
3. in index.js, create the initial function stubs.











function generateNumberSection(drawings) {
    //
    return `
    <section id="numbersection">
        <ul>
            ${drawings.map(generateDrawingItem)}
        </ul>
    </section>
    `
}

// for each drawing in drawings, map it on to generatedrawing items
/* {name: "Powerball",
    date: 2/3/2018,
    numbers: [2,3,4,5,6,18,2],
}
adapter from api to app (so if the api changes, then you just need to change the adapter)  
called programming to contract - adjusting at the point of the adapter so you dont violate the contract

** need to write a piece that gets the data form the api and returns the type of object above.  it will ask the adapter for the data and then the adpater will get from the api.

*/

function generateDrawingItem(drawing) {
    // 
    const numberList = genera



































/////////////
lotto app day 2 before alterations
/////////////

'usestrict';

function generateMainPage() {
    //
}

function renderMainPage() {
    //
}

function generateNumberSection(drawings) {
    //
}

function renderNumberSection(drawings) {
    //
}

function generateNavSection() {
    //
}

function renderNavSection() {
    //
}

function generateNewsSection(newsItems) {
    //
}

function renderNewsSection(newsItems) {
    //
}

function generateDrawingItem(drawingName, drawingDate, numbers) {
    //
}

function renderDrawingItem(drawingName, drawingDate, numbers) {
    //
}

function generateNumbersList(numbers) {
    // need to use double quotes.  single quotes dont interpret so it would be a backslash and n, not a new line.
    const numberList = numbers.map(number => {return `<li class="numberitem">${number}</li>`}).join("\n"); 
    return `
    <ul class="numberslist">
        ${numberList};
    </ul>
    ` 
}

function renderNumbersList(numbers, container) {
    container.append(generateNumbersList(numbers));
}

function generateCountDown(drawingName, drawingDate) {
    const today = new Date();
    const daysLeft = 2;
    const hoursLeft = 2;
    const minutesLeft = 2;
    return `
    <h3>Next ${drawingName} Drawing</h3>
    <div class="countdown">
        <span class="days">${daysLeft}</span>
        <span class="hours">${hoursLeft}</span>
        <span class="minutes">${minutesLeft}</span>
    </div>
    `
}

function renderCountDown(drawingName, drawingDate) {
    //
}

function generateNewsItem(newsItem) {
    //
}

function renderNewsItem(newsItem) {
    //
}
